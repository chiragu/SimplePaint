package com.chiragus.SimplePaint;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

/**
 * JPanel that contains the buffer
 * 
 * Adapted from code
 * from:
 * https://stackoverflow.com/questions/32981758/easier-way-to-make-a-paint-application-in-java
 * and
 * https://stackoverflow.com/questions/43081526/how-to-draw-on-top-of-an-image-in-java
 * 
 * @author Chirag Uttamsingh
 * @version 2017.09 - initial implementation
 * @since 2017.09
 */
// The JPanel that contains the editor
	public class BufferPane extends JPanel {

		/**
		* Generated by eclipse 
		*/
		private static final long serialVersionUID = -6162415022572302838L;
		
		private List<List<Point>> points;

		public BufferPane() {
			
			// set background white
	        setOpaque(true);
	        setBackground(Color.WHITE);

			/* set custom eraser cursor
	        Toolkit toolkit = Toolkit.getDefaultToolkit();
	        Image image = toolkit.getImage(Disciple.class.getResource("img/eraser2.png"));
	        Cursor eraserCursor = toolkit.createCustomCursor(image , new Point(this.getX(),  this.getY()), "eraser");
	        this.setCursor (eraserCursor); */
			
			// listen to mouse dragging
			points = new ArrayList<>(25);
			MouseAdapter ma = new MouseAdapter() {

				private List<Point> currentPath;

				@Override
				public void mousePressed(MouseEvent e) {
					currentPath = new ArrayList<>(25);
					currentPath.add(e.getPoint());

					points.add(currentPath);
				}

				@Override
				public void mouseDragged(MouseEvent e) {
					Point dragPoint = e.getPoint();
					currentPath.add(dragPoint);
					repaint();
				}

				@Override
				public void mouseReleased(MouseEvent e) {
					currentPath = null;
				}

			};

			addMouseListener(ma);
			addMouseMotionListener(ma);
		}
		
		@Override
		public Dimension getPreferredSize() {
			return new Dimension(600, 500);
		}


		protected void paintComponent(Graphics g) {
			super.paintComponent(g);
			Graphics2D g2d = (Graphics2D) g.create();
	
			
			// set the size of the eraser
			g2d.setStroke(new BasicStroke(5));
			
			// set the color of the eraser
			g2d.setColor(Color.BLACK);
			
			// draw
			for (List<Point> path : points) {
				Point from = null;
				for (Point p : path) {
					if (from != null) {
						g2d.drawLine(from.x, from.y, p.x, p.y);
					}
					from = p;
				}
			}
			g2d.dispose();
		}
		

	}	